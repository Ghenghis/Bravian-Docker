name: CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer, phpstan, phpcs
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install PHP dependencies
        run: composer install --no-progress
        
      - name: Install Node dependencies
        run: npm ci
        
      - name: PHP Syntax Check
        run: find src/php -name "*.php" -exec php -l {} \;
        
      - name: PHPStan Analysis
        run: vendor/bin/phpstan analyse src/php --level=9
        
      - name: PHP CodeSniffer
        run: vendor/bin/phpcs --standard=PSR12 src/php
        
      - name: ESLint
        run: npm run lint
        
      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      mysql:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: travian_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: xdebug
          
      - name: Install dependencies
        run: |
          composer install
          npm ci
          
      - name: Run PHP Unit Tests
        run: vendor/bin/phpunit --coverage-text --coverage-clover coverage.xml
        
      - name: Run JavaScript Tests
        run: npm test -- --coverage
        
      - name: Check test coverage
        run: |
          COVERAGE=$(grep -oP 'Lines:\s+\K\d+' coverage.txt)
          if [ "$COVERAGE" -lt "85" ]; then
            echo "Coverage $COVERAGE% is below 85%"
            exit 1
          fi
          
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push
          
      - name: Scan Docker images with Trivy
        run: |
          for image in $(docker-compose config --images); do
            trivy image --severity HIGH,CRITICAL $image
          done
          
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add your deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
          
      - name: Notify deployment
        if: always()
        run: |
          echo "Deployment status: ${{ job.status }}"
